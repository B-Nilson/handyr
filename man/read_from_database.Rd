% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_from_database.R
\name{read_from_database}
\alias{read_from_database}
\title{Read data from a database}
\usage{
read_from_database(db, table_name, query_fun = function(df) df, collect = TRUE)
}
\arguments{
\item{db}{A database connection or the path to a database file (if \\emph{.sqlite or \}.duckdb).}

\item{table_name}{A character string specifying the table to read from.}

\item{query_fun}{A function taking a single argument (the data.frame-like object to be queried) and returning a data frame.
Default is the identity function, which simply returns the input data frame.
Most \code{dplyr} functions will be implemented here (see \link[dbplyr:dbplyr-package]{dbplyr::dbplyr} for details).
(e.g. \verb{query_fun = \\(df) df |> dplyr::select(column1, column2)})
Anything else beyond variable names needs to be prefaced with \verb{!!} (e.g. \code{... |>  dplyr::filter(month |> dplyr::between(!!select_months[1], !!select_months[2]))}).}

\item{collect}{A logical value indicating whether to use \code{\link[dplyr:compute]{dplyr::collect()}} to fetch the data from the database.
Default is \code{TRUE}.}
}
\value{
A data frame containing the data from the specified table in the database.
}
\description{
\code{read_from_database} takes a database connection and table name, applies a dplyr-based query, and returns either a lazy-table or a data frame of the query results.
}
\examples{
# Connect to a database
db <- create_database("test.sqlite")

# Read data from a table
output <- read_from_database(db, "airquality")

# Disconnect from database
DBI::dbDisconnect(db)
}
